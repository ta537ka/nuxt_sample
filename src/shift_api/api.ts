/* tslint:disable */
/* eslint-disable */
/**
 * Shift API
 * A short description of API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Admins
 */
export interface Admins {
    /**
     * 
     * @type {number}
     * @memberof Admins
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Admins
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Admins
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ApiAdminShiftsPostRequest
 */
export interface ApiAdminShiftsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminShiftsPostRequest
     */
    'start_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminShiftsPostRequest
     */
    'end_date'?: string;
}
/**
 * 
 * @export
 * @interface ApiStaffShiftsPostRequest
 */
export interface ApiStaffShiftsPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiStaffShiftsPostRequest
     */
    'staff_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiStaffShiftsPostRequest
     */
    'status_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiStaffShiftsPostRequest
     */
    'day'?: string;
}
/**
 * 
 * @export
 * @interface CompleteShifts
 */
export interface CompleteShifts {
    /**
     * 
     * @type {number}
     * @memberof CompleteShifts
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof CompleteShifts
     */
    'staff_id': number;
    /**
     * 
     * @type {number}
     * @memberof CompleteShifts
     */
    'status_id': number;
    /**
     * 
     * @type {string}
     * @memberof CompleteShifts
     */
    'day': string;
}
/**
 * 
 * @export
 * @interface ShiftStatuses
 */
export interface ShiftStatuses {
    /**
     * 
     * @type {number}
     * @memberof ShiftStatuses
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ShiftStatuses
     */
    'status': number;
}
/**
 * 
 * @export
 * @interface Shifts
 */
export interface Shifts {
    /**
     * 
     * @type {number}
     * @memberof Shifts
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Shifts
     */
    'staff_id': number;
    /**
     * 
     * @type {number}
     * @memberof Shifts
     */
    'status_id': number;
    /**
     * 
     * @type {string}
     * @memberof Shifts
     */
    'day': string;
}
/**
 * 
 * @export
 * @interface Staffs
 */
export interface Staffs {
    /**
     * 
     * @type {number}
     * @memberof Staffs
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Staffs
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Staffs
     */
    'password'?: string;
}

/**
 * AdminCompleteShiftsApi - axios parameter creator
 * @export
 */
export const AdminCompleteShiftsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete complete_shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCompleteShiftsIdDelete: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/complete_shifts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get complete_shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCompleteShiftsIdGet: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/complete_shifts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a complete_shift
         * @summary Update a Complete_Shift
         * @param {CompleteShifts} completeShifts complete_shift to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCompleteShiftsIdPut: async (completeShifts: CompleteShifts, id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'completeShifts' is not null or undefined
            assertParamExists('apiAdminCompleteShiftsIdPut', 'completeShifts', completeShifts)
            const localVarPath = `/api/admin/complete_shifts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeShifts, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create complete_shift.
         * @param {ApiStaffShiftsPostRequest} [apiStaffShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCompleteShiftsPost: async (apiStaffShiftsPostRequest?: ApiStaffShiftsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/complete_shifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiStaffShiftsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all complete_shifts.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompleteShiftsPost: async (apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/complete_shifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminShiftsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminCompleteShiftsApi - functional programming interface
 * @export
 */
export const AdminCompleteShiftsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminCompleteShiftsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete complete_shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCompleteShiftsIdDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteShifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCompleteShiftsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get complete_shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCompleteShiftsIdGet(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteShifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCompleteShiftsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a complete_shift
         * @summary Update a Complete_Shift
         * @param {CompleteShifts} completeShifts complete_shift to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCompleteShiftsIdPut(completeShifts: CompleteShifts, id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteShifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCompleteShiftsIdPut(completeShifts, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create complete_shift.
         * @param {ApiStaffShiftsPostRequest} [apiStaffShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCompleteShiftsPost(apiStaffShiftsPostRequest?: ApiStaffShiftsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteShifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCompleteShiftsPost(apiStaffShiftsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all complete_shifts.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCompleteShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteShifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCompleteShiftsPost(apiAdminShiftsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminCompleteShiftsApi - factory interface
 * @export
 */
export const AdminCompleteShiftsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminCompleteShiftsApiFp(configuration)
    return {
        /**
         * 
         * @summary delete complete_shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCompleteShiftsIdDelete(id?: number, options?: any): AxiosPromise<CompleteShifts> {
            return localVarFp.apiAdminCompleteShiftsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get complete_shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCompleteShiftsIdGet(id?: number, options?: any): AxiosPromise<CompleteShifts> {
            return localVarFp.apiAdminCompleteShiftsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a complete_shift
         * @summary Update a Complete_Shift
         * @param {CompleteShifts} completeShifts complete_shift to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCompleteShiftsIdPut(completeShifts: CompleteShifts, id?: number, options?: any): AxiosPromise<CompleteShifts> {
            return localVarFp.apiAdminCompleteShiftsIdPut(completeShifts, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create complete_shift.
         * @param {ApiStaffShiftsPostRequest} [apiStaffShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCompleteShiftsPost(apiStaffShiftsPostRequest?: ApiStaffShiftsPostRequest, options?: any): AxiosPromise<CompleteShifts> {
            return localVarFp.apiAdminCompleteShiftsPost(apiStaffShiftsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all complete_shifts.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompleteShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: any): AxiosPromise<CompleteShifts> {
            return localVarFp.apiCompleteShiftsPost(apiAdminShiftsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminCompleteShiftsApi - object-oriented interface
 * @export
 * @class AdminCompleteShiftsApi
 * @extends {BaseAPI}
 */
export class AdminCompleteShiftsApi extends BaseAPI {
    /**
     * 
     * @summary delete complete_shift.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCompleteShiftsApi
     */
    public apiAdminCompleteShiftsIdDelete(id?: number, options?: AxiosRequestConfig) {
        return AdminCompleteShiftsApiFp(this.configuration).apiAdminCompleteShiftsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get complete_shift.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCompleteShiftsApi
     */
    public apiAdminCompleteShiftsIdGet(id?: number, options?: AxiosRequestConfig) {
        return AdminCompleteShiftsApiFp(this.configuration).apiAdminCompleteShiftsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a complete_shift
     * @summary Update a Complete_Shift
     * @param {CompleteShifts} completeShifts complete_shift to update
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCompleteShiftsApi
     */
    public apiAdminCompleteShiftsIdPut(completeShifts: CompleteShifts, id?: number, options?: AxiosRequestConfig) {
        return AdminCompleteShiftsApiFp(this.configuration).apiAdminCompleteShiftsIdPut(completeShifts, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create complete_shift.
     * @param {ApiStaffShiftsPostRequest} [apiStaffShiftsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCompleteShiftsApi
     */
    public apiAdminCompleteShiftsPost(apiStaffShiftsPostRequest?: ApiStaffShiftsPostRequest, options?: AxiosRequestConfig) {
        return AdminCompleteShiftsApiFp(this.configuration).apiAdminCompleteShiftsPost(apiStaffShiftsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all complete_shifts.
     * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCompleteShiftsApi
     */
    public apiCompleteShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: AxiosRequestConfig) {
        return AdminCompleteShiftsApiFp(this.configuration).apiCompleteShiftsPost(apiAdminShiftsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AdminShiftsApi - axios parameter creator
 * @export
 */
export const AdminShiftsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all staffs.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminShiftsPost: async (apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/shifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminShiftsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminShiftsApi - functional programming interface
 * @export
 */
export const AdminShiftsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminShiftsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all staffs.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminShiftsPost(apiAdminShiftsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminShiftsApi - factory interface
 * @export
 */
export const AdminShiftsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminShiftsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all staffs.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: any): AxiosPromise<Shifts> {
            return localVarFp.apiAdminShiftsPost(apiAdminShiftsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminShiftsApi - object-oriented interface
 * @export
 * @class AdminShiftsApi
 * @extends {BaseAPI}
 */
export class AdminShiftsApi extends BaseAPI {
    /**
     * 
     * @summary Get all staffs.
     * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminShiftsApi
     */
    public apiAdminShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: AxiosRequestConfig) {
        return AdminShiftsApiFp(this.configuration).apiAdminShiftsPost(apiAdminShiftsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AdminsApi - axios parameter creator
 * @export
 */
export const AdminsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all admins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete admins.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminsIdDelete: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get admin.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminsIdGet: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a admin
         * @summary Update a Admin
         * @param {Admins} admins admin to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminsIdPut: async (admins: Admins, id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admins' is not null or undefined
            assertParamExists('apiAdminsIdPut', 'admins', admins)
            const localVarPath = `/api/admins/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(admins, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new admin
         * @summary Create a new Admin
         * @param {Admins} admins admin to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminsPost: async (admins: Admins, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admins' is not null or undefined
            assertParamExists('apiAdminsPost', 'admins', admins)
            const localVarPath = `/api/admins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(admins, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminsApi - functional programming interface
 * @export
 */
export const AdminsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all admins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admins>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete admins.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminsIdDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admins>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get admin.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminsIdGet(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admins>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a admin
         * @summary Update a Admin
         * @param {Admins} admins admin to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminsIdPut(admins: Admins, id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admins>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminsIdPut(admins, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new admin
         * @summary Create a new Admin
         * @param {Admins} admins admin to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminsPost(admins: Admins, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admins>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminsPost(admins, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminsApi - factory interface
 * @export
 */
export const AdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all admins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminsGet(options?: any): AxiosPromise<Admins> {
            return localVarFp.apiAdminsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete admins.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminsIdDelete(id?: number, options?: any): AxiosPromise<Admins> {
            return localVarFp.apiAdminsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get admin.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminsIdGet(id?: number, options?: any): AxiosPromise<Admins> {
            return localVarFp.apiAdminsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a admin
         * @summary Update a Admin
         * @param {Admins} admins admin to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminsIdPut(admins: Admins, id?: number, options?: any): AxiosPromise<Admins> {
            return localVarFp.apiAdminsIdPut(admins, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new admin
         * @summary Create a new Admin
         * @param {Admins} admins admin to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminsPost(admins: Admins, options?: any): AxiosPromise<Admins> {
            return localVarFp.apiAdminsPost(admins, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminsApi - object-oriented interface
 * @export
 * @class AdminsApi
 * @extends {BaseAPI}
 */
export class AdminsApi extends BaseAPI {
    /**
     * 
     * @summary Get all admins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public apiAdminsGet(options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).apiAdminsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete admins.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public apiAdminsIdDelete(id?: number, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).apiAdminsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get admin.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public apiAdminsIdGet(id?: number, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).apiAdminsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a admin
     * @summary Update a Admin
     * @param {Admins} admins admin to update
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public apiAdminsIdPut(admins: Admins, id?: number, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).apiAdminsIdPut(admins, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new admin
     * @summary Create a new Admin
     * @param {Admins} admins admin to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public apiAdminsPost(admins: Admins, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).apiAdminsPost(admins, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShiftStatusesApi - axios parameter creator
 * @export
 */
export const ShiftStatusesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all Shift_Statuses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftStatusesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shift_statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete shift_status.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftStatusesIdDelete: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shift_statuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get shift_status.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftStatusesIdGet: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shift_statuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a shift_status
         * @summary Update a Shift_Status
         * @param {ShiftStatuses} shiftStatuses admin to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftStatusesIdPut: async (shiftStatuses: ShiftStatuses, id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftStatuses' is not null or undefined
            assertParamExists('apiShiftStatusesIdPut', 'shiftStatuses', shiftStatuses)
            const localVarPath = `/api/shift_statuses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shiftStatuses, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new shift_status
         * @summary Create a new Shift_Status
         * @param {ShiftStatuses} shiftStatuses shift_status to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftStatusesPost: async (shiftStatuses: ShiftStatuses, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftStatuses' is not null or undefined
            assertParamExists('apiShiftStatusesPost', 'shiftStatuses', shiftStatuses)
            const localVarPath = `/api/shift_statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shiftStatuses, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShiftStatusesApi - functional programming interface
 * @export
 */
export const ShiftStatusesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShiftStatusesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all Shift_Statuses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShiftStatusesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftStatuses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShiftStatusesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete shift_status.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShiftStatusesIdDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftStatuses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShiftStatusesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get shift_status.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShiftStatusesIdGet(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftStatuses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShiftStatusesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a shift_status
         * @summary Update a Shift_Status
         * @param {ShiftStatuses} shiftStatuses admin to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShiftStatusesIdPut(shiftStatuses: ShiftStatuses, id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftStatuses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShiftStatusesIdPut(shiftStatuses, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new shift_status
         * @summary Create a new Shift_Status
         * @param {ShiftStatuses} shiftStatuses shift_status to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShiftStatusesPost(shiftStatuses: ShiftStatuses, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftStatuses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShiftStatusesPost(shiftStatuses, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShiftStatusesApi - factory interface
 * @export
 */
export const ShiftStatusesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShiftStatusesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all Shift_Statuses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftStatusesGet(options?: any): AxiosPromise<ShiftStatuses> {
            return localVarFp.apiShiftStatusesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete shift_status.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftStatusesIdDelete(id?: number, options?: any): AxiosPromise<ShiftStatuses> {
            return localVarFp.apiShiftStatusesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get shift_status.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftStatusesIdGet(id?: number, options?: any): AxiosPromise<ShiftStatuses> {
            return localVarFp.apiShiftStatusesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a shift_status
         * @summary Update a Shift_Status
         * @param {ShiftStatuses} shiftStatuses admin to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftStatusesIdPut(shiftStatuses: ShiftStatuses, id?: number, options?: any): AxiosPromise<ShiftStatuses> {
            return localVarFp.apiShiftStatusesIdPut(shiftStatuses, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new shift_status
         * @summary Create a new Shift_Status
         * @param {ShiftStatuses} shiftStatuses shift_status to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftStatusesPost(shiftStatuses: ShiftStatuses, options?: any): AxiosPromise<ShiftStatuses> {
            return localVarFp.apiShiftStatusesPost(shiftStatuses, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShiftStatusesApi - object-oriented interface
 * @export
 * @class ShiftStatusesApi
 * @extends {BaseAPI}
 */
export class ShiftStatusesApi extends BaseAPI {
    /**
     * 
     * @summary Get all Shift_Statuses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftStatusesApi
     */
    public apiShiftStatusesGet(options?: AxiosRequestConfig) {
        return ShiftStatusesApiFp(this.configuration).apiShiftStatusesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete shift_status.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftStatusesApi
     */
    public apiShiftStatusesIdDelete(id?: number, options?: AxiosRequestConfig) {
        return ShiftStatusesApiFp(this.configuration).apiShiftStatusesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get shift_status.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftStatusesApi
     */
    public apiShiftStatusesIdGet(id?: number, options?: AxiosRequestConfig) {
        return ShiftStatusesApiFp(this.configuration).apiShiftStatusesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a shift_status
     * @summary Update a Shift_Status
     * @param {ShiftStatuses} shiftStatuses admin to update
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftStatusesApi
     */
    public apiShiftStatusesIdPut(shiftStatuses: ShiftStatuses, id?: number, options?: AxiosRequestConfig) {
        return ShiftStatusesApiFp(this.configuration).apiShiftStatusesIdPut(shiftStatuses, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new shift_status
     * @summary Create a new Shift_Status
     * @param {ShiftStatuses} shiftStatuses shift_status to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftStatusesApi
     */
    public apiShiftStatusesPost(shiftStatuses: ShiftStatuses, options?: AxiosRequestConfig) {
        return ShiftStatusesApiFp(this.configuration).apiShiftStatusesPost(shiftStatuses, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StaffCompleteShiftsApi - axios parameter creator
 * @export
 */
export const StaffCompleteShiftsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all complete_shifts.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffCompleteShiftsPost: async (apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staff/complete_shifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminShiftsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffCompleteShiftsApi - functional programming interface
 * @export
 */
export const StaffCompleteShiftsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaffCompleteShiftsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all complete_shifts.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStaffCompleteShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteShifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStaffCompleteShiftsPost(apiAdminShiftsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StaffCompleteShiftsApi - factory interface
 * @export
 */
export const StaffCompleteShiftsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaffCompleteShiftsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all complete_shifts.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffCompleteShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: any): AxiosPromise<CompleteShifts> {
            return localVarFp.apiStaffCompleteShiftsPost(apiAdminShiftsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StaffCompleteShiftsApi - object-oriented interface
 * @export
 * @class StaffCompleteShiftsApi
 * @extends {BaseAPI}
 */
export class StaffCompleteShiftsApi extends BaseAPI {
    /**
     * 
     * @summary Get all complete_shifts.
     * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffCompleteShiftsApi
     */
    public apiStaffCompleteShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: AxiosRequestConfig) {
        return StaffCompleteShiftsApiFp(this.configuration).apiStaffCompleteShiftsPost(apiAdminShiftsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StaffShiftsApi - axios parameter creator
 * @export
 */
export const StaffShiftsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all shifts.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftsPost: async (apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/shifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminShiftsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffShiftsIdDelete: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staff/shifts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffShiftsIdGet: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staff/shifts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a shift
         * @summary Update a Shift
         * @param {Shifts} shifts shift to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffShiftsIdPut: async (shifts: Shifts, id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shifts' is not null or undefined
            assertParamExists('apiStaffShiftsIdPut', 'shifts', shifts)
            const localVarPath = `/api/staff/shifts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shifts, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create shift.
         * @param {ApiStaffShiftsPostRequest} [apiStaffShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffShiftsPost: async (apiStaffShiftsPostRequest?: ApiStaffShiftsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staff/shifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiStaffShiftsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffShiftsApi - functional programming interface
 * @export
 */
export const StaffShiftsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaffShiftsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all shifts.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiShiftsPost(apiAdminShiftsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStaffShiftsIdDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStaffShiftsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStaffShiftsIdGet(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStaffShiftsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a shift
         * @summary Update a Shift
         * @param {Shifts} shifts shift to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStaffShiftsIdPut(shifts: Shifts, id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStaffShiftsIdPut(shifts, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create shift.
         * @param {ApiStaffShiftsPostRequest} [apiStaffShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStaffShiftsPost(apiStaffShiftsPostRequest?: ApiStaffShiftsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shifts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStaffShiftsPost(apiStaffShiftsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StaffShiftsApi - factory interface
 * @export
 */
export const StaffShiftsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaffShiftsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all shifts.
         * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: any): AxiosPromise<Shifts> {
            return localVarFp.apiShiftsPost(apiAdminShiftsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffShiftsIdDelete(id?: number, options?: any): AxiosPromise<Shifts> {
            return localVarFp.apiStaffShiftsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get shift.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffShiftsIdGet(id?: number, options?: any): AxiosPromise<Shifts> {
            return localVarFp.apiStaffShiftsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a shift
         * @summary Update a Shift
         * @param {Shifts} shifts shift to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffShiftsIdPut(shifts: Shifts, id?: number, options?: any): AxiosPromise<Shifts> {
            return localVarFp.apiStaffShiftsIdPut(shifts, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create shift.
         * @param {ApiStaffShiftsPostRequest} [apiStaffShiftsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffShiftsPost(apiStaffShiftsPostRequest?: ApiStaffShiftsPostRequest, options?: any): AxiosPromise<Shifts> {
            return localVarFp.apiStaffShiftsPost(apiStaffShiftsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StaffShiftsApi - object-oriented interface
 * @export
 * @class StaffShiftsApi
 * @extends {BaseAPI}
 */
export class StaffShiftsApi extends BaseAPI {
    /**
     * 
     * @summary Get all shifts.
     * @param {ApiAdminShiftsPostRequest} [apiAdminShiftsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffShiftsApi
     */
    public apiShiftsPost(apiAdminShiftsPostRequest?: ApiAdminShiftsPostRequest, options?: AxiosRequestConfig) {
        return StaffShiftsApiFp(this.configuration).apiShiftsPost(apiAdminShiftsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete shift.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffShiftsApi
     */
    public apiStaffShiftsIdDelete(id?: number, options?: AxiosRequestConfig) {
        return StaffShiftsApiFp(this.configuration).apiStaffShiftsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get shift.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffShiftsApi
     */
    public apiStaffShiftsIdGet(id?: number, options?: AxiosRequestConfig) {
        return StaffShiftsApiFp(this.configuration).apiStaffShiftsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a shift
     * @summary Update a Shift
     * @param {Shifts} shifts shift to update
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffShiftsApi
     */
    public apiStaffShiftsIdPut(shifts: Shifts, id?: number, options?: AxiosRequestConfig) {
        return StaffShiftsApiFp(this.configuration).apiStaffShiftsIdPut(shifts, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create shift.
     * @param {ApiStaffShiftsPostRequest} [apiStaffShiftsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffShiftsApi
     */
    public apiStaffShiftsPost(apiStaffShiftsPostRequest?: ApiStaffShiftsPostRequest, options?: AxiosRequestConfig) {
        return StaffShiftsApiFp(this.configuration).apiStaffShiftsPost(apiStaffShiftsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StaffsApi - axios parameter creator
 * @export
 */
export const StaffsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all staffs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staffs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete staffs.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffsIdDelete: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staffs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get staff.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffsIdGet: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staffs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a staff
         * @summary Update a Staff
         * @param {Staffs} staffs staff to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffsIdPut: async (staffs: Staffs, id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffs' is not null or undefined
            assertParamExists('apiStaffsIdPut', 'staffs', staffs)
            const localVarPath = `/api/staffs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(staffs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new staff
         * @summary Create a new Staff
         * @param {Staffs} staffs staff to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffsPost: async (staffs: Staffs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffs' is not null or undefined
            assertParamExists('apiStaffsPost', 'staffs', staffs)
            const localVarPath = `/api/staffs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(staffs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffsApi - functional programming interface
 * @export
 */
export const StaffsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaffsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all staffs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStaffsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Staffs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStaffsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete staffs.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStaffsIdDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Staffs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStaffsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get staff.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStaffsIdGet(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Staffs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStaffsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a staff
         * @summary Update a Staff
         * @param {Staffs} staffs staff to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStaffsIdPut(staffs: Staffs, id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Staffs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStaffsIdPut(staffs, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new staff
         * @summary Create a new Staff
         * @param {Staffs} staffs staff to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStaffsPost(staffs: Staffs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Staffs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStaffsPost(staffs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StaffsApi - factory interface
 * @export
 */
export const StaffsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaffsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all staffs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffsGet(options?: any): AxiosPromise<Staffs> {
            return localVarFp.apiStaffsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete staffs.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffsIdDelete(id?: number, options?: any): AxiosPromise<Staffs> {
            return localVarFp.apiStaffsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get staff.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffsIdGet(id?: number, options?: any): AxiosPromise<Staffs> {
            return localVarFp.apiStaffsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a staff
         * @summary Update a Staff
         * @param {Staffs} staffs staff to update
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffsIdPut(staffs: Staffs, id?: number, options?: any): AxiosPromise<Staffs> {
            return localVarFp.apiStaffsIdPut(staffs, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new staff
         * @summary Create a new Staff
         * @param {Staffs} staffs staff to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStaffsPost(staffs: Staffs, options?: any): AxiosPromise<Staffs> {
            return localVarFp.apiStaffsPost(staffs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StaffsApi - object-oriented interface
 * @export
 * @class StaffsApi
 * @extends {BaseAPI}
 */
export class StaffsApi extends BaseAPI {
    /**
     * 
     * @summary Get all staffs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffsApi
     */
    public apiStaffsGet(options?: AxiosRequestConfig) {
        return StaffsApiFp(this.configuration).apiStaffsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete staffs.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffsApi
     */
    public apiStaffsIdDelete(id?: number, options?: AxiosRequestConfig) {
        return StaffsApiFp(this.configuration).apiStaffsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get staff.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffsApi
     */
    public apiStaffsIdGet(id?: number, options?: AxiosRequestConfig) {
        return StaffsApiFp(this.configuration).apiStaffsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a staff
     * @summary Update a Staff
     * @param {Staffs} staffs staff to update
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffsApi
     */
    public apiStaffsIdPut(staffs: Staffs, id?: number, options?: AxiosRequestConfig) {
        return StaffsApiFp(this.configuration).apiStaffsIdPut(staffs, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new staff
     * @summary Create a new Staff
     * @param {Staffs} staffs staff to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffsApi
     */
    public apiStaffsPost(staffs: Staffs, options?: AxiosRequestConfig) {
        return StaffsApiFp(this.configuration).apiStaffsPost(staffs, options).then((request) => request(this.axios, this.basePath));
    }
}


